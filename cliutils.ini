// This is an alternative .ini file for simple batch processing.
// Add the -e switch to suppress output messages.
//
// Sample usage:
//    frams -Q -s -icliutils.ini makef0 -q <somegenotype
//    frams -Q -s -icliutils.ini rnd "mut inputfilename outputfilename" -q <inputfilename_if_from_stdin
//    frams -Q -s -icliutils.ini "simil filename.gen" -q >similarity_matrix.txt
//    frams -Q -s -icliutils.ini "diversity filename.gen" -q >diversities.txt
//    frams -Q -s -icliutils.ini "symmetry filename.gen" -q
//    frams -Q -s -icliutils.ini "expdef standard-eval"  "eval settings.expt filename.gen" -q
//    frams -Q -s -icliutils.ini htmlize -q <somegenotype
//    frams -Q -s -icliutils.ini htmlizeShort -q <somegenotype
//    frams -Q -s -icliutils.ini pjnc -q <somegenotype
//    frams -Q -s -icliutils.ini "getsimplest 1 outputfilename" -q
//    frams -Q -s -icliutils.ini rnd "crossover inputfilename1 inputfilename2 outputfilename" -q
//    frams -Q -s -icliutils.ini povray -q <somegenotype
//
// Where "inputfilename" or "outputfilename" is  mentioned, you can use "-" as a name if you want stdin or stdout.


function init()
{
  CLI.addMacro("expdef", 1, "Simulator.expdef=\"$1\";", "set the experiment definition");
  CLI.addMacro("lm", 0, "CLI.listMacros();", "list command-line macros");
  CLI.addMacro("rnd", 0, "Math.randomize();", "initialize random seed randomly");
  CLI.addMacro("rnd", 1, "Math.seed=$1;", "initialize random seed from the numeric argument");
  CLI.addMacro("makef0", 0, "makef0FromStdin();", "read genotype from stdin, convert to f0. Print nothing when cannot convert.");
  CLI.addMacro("mut", 2, "mutate(\"$1\",\"$2\");", "read genotype from file or stdin, then mutate and output");
  CLI.addMacro("simil", 1, "Simulator.import(\"$1\",2); calcSimilarityMatrix();", "read genotypes from file, calculate similarity matrix. Details in http://www.framsticks.com/bib/Komosinski-et-al-2001 , http://www.framsticks.com/bib/Komosinski-and-Kubiak-2011 and http://www.framsticks.com/bib/Komosinski-2016");
  CLI.addMacro("diversity", 1, "Simulator.import(\"$1\",2); calcDiversity();", "read genotypes from file, calculate diversity of each genotype (actually similarity to all others). Details in http://www.framsticks.com/bib/Komosinski-et-al-2001 , http://www.framsticks.com/bib/Komosinski-and-Kubiak-2011 and http://www.framsticks.com/bib/Komosinski-2016");
  CLI.addMacro("symmetry", 1, "Simulator.import(\"$1\",2); calcSymmetry();", "read genotypes from file, calculate planar symmetry of a model made from each genotype. Details in http://www.framsticks.com/bib/Jaskowski-and-Komosinski-2008");
  CLI.addMacro("eval", 2, "Simulator.import(\"$1\",2+4+8+16); Simulator.import(\"$2\",2); Simulator.init(); Simulator.start(); while (Simulator.running) Simulator.step();", "evaluate genotypes and save results to a file. Use .expt/.sim file compatible with standard-eval.expdef.");
  CLI.addMacro("htmlize", 0, "CLI.println(GenMan.toHTML(CLI.stdin.readUntilEOF()));", "print a genotype in HTML, using colors");
  CLI.addMacro("htmlizeShort", 0, "CLI.println(GenMan.toHTMLshort(CLI.stdin.readUntilEOF()));", "print a genotype (shortened if needed) in HTML, using colors");
  CLI.addMacro("pjnc", 0, "CLI.println(PJNCfromStdin());", "determine number of parts, joints, neurons, and neural connections for a genotype (read from stdin)");
  CLI.addMacro("getsimplest", 2, "writeToFileOrStdout(GenMan.getSimplest(\"$1\").genotype,\"$2\");", "output the simplest genotype in the encoding given");
  CLI.addMacro("crossover", 3, "crossOver(\"$1\",\"$2\",\"$3\");", "crossover two genotypes (each in one file; files should contain just raw genotypes) and output the result");
  CLI.addMacro("povray", 0, "povrayFromGeno(Geno.newFromString(CLI.stdin.readUntilEOF()));", "generate a POV-Ray file from the standard input genotype");
}


function readFromFileOrStdin(inputfilename)
{
	if (inputfilename == "-")
		return CLI.stdin.readUntilEOF();
	else
	{
		var f=File.open(inputfilename);
		var s=f.readUntilEOF();
		f.close();
		return s;
	}		
}

function writeToFileOrStdout(s, outputfilename)
{
	if (outputfilename == "-")
		CLI.println(s);
	else
	{
		var f=File.createDirect(outputfilename, "%d bytes" % String.len(s));
		f.writeString(s);
		f.close();
	}		
}

function makef0FromStdin()
{
  var g = CLI.stdin.readUntilEOF();
  var og = Geno.newFromString(g);
  if (og.is_valid)
    CLI.print("//0\n" + og.f0genotype);
}

function mutate(inputfilename, outputfilename)
{
	var g = readFromFileOrStdin(inputfilename);
	writeToFileOrStdout(GenMan.mutate(Geno.newFromString(g)).genotype, outputfilename);
}

function crossOver(inputfilename1, inputfilename2, outputfilename)
{
	var g1 = readFromFileOrStdin(inputfilename1);
	var g2 = readFromFileOrStdin(inputfilename2);
	writeToFileOrStdout(GenMan.crossOver(Geno.newFromString(g1),Geno.newFromString(g2)).genotype, outputfilename);
}


function calcSimilarityMatrix()
{
  //you can adjust weights from default values:
  //ModelSimilarity.simil_parts   =0.0;
  //ModelSimilarity.simil_partdeg =1.0;
  //ModelSimilarity.simil_neuro   =0.1;
  //ModelSimilarity.simil_partgeom=0.0;
  //ModelSimilarity.simil_fixedZaxis=0;
  
  var pool=GenePools[0];

  CLI.println("# Dissimilarity matrix (TAB-delimited). The two first columns are: final fitness and name.");
  CLI.println("# Weights used for computation: %lg, %lg, %lg, %lg" % ModelSimilarity.simil_parts % ModelSimilarity.simil_partdeg % ModelSimilarity.simil_neuro % ModelSimilarity.simil_partgeom);
  CLI.println("# Is the vertical axis fixed: %d" % ModelSimilarity.simil_fixedZaxis);
  CLI.println("# Matrix size (the number of individuals): %d" % pool.size);
  
  for (var i = 0;i < pool.size;i++)
  {
    var t = "%lg\t%s" % pool[i].fit2 % pool[i].name;
    for (var j = 0;j < pool.size;j++)
    {
      t += "\t%lg" % ModelSimilarity.evaluateDistance(pool[i].geno, pool[j].geno);
    }
    CLI.println(t);
  }
}

function calcDiversity()
{
  var pool=GenePools[0];
  for (var i = 0;i < pool.size;i++)
  {
    var t = 0.0;
    for (var j = 0;j < pool.size;j++)
      t += ModelSimilarity.evaluateDistance(pool[i].geno, pool[j].geno);
    CLI.println(t);
  }
}

function calcSymmetry()
{
	var detail=100.0; //increase to get a more thorough search for the similarity plane (note however that sym(Alpha/Beta/Pos)Steps fields are limited anyway). Decrease for faster evaluation.
	var i;
	for (i = 0;i < GenePool.size;i++)
	{
		var model=GenePool[i].getModel();
		//time complexity of ModelSymmetry.calculateSymmetry() is O(alphaSteps*betaSteps*posSteps * sticks^2*log(sticks))
		var sticks=model.numjoints;
		
		/* now adjust parameters to find the symmetry plane
		1. stepsAlpha = stepsBeta
		2. stepsAlpha >= 2
		3. posSteps >= 2
		angles are probably more important than posSteps, but hard to say how much (2, 3 times?) 
		so let's divide angles by sqrt(sticks), and pos by sticks. log(sticks) in time complexity stays not depreciated */
		ModelSymmetry.symAlphaSteps=Math.max(2.0,detail*2/Math.sqrt(sticks));
		ModelSymmetry.symBetaSteps=ModelSymmetry.symAlphaSteps;
		ModelSymmetry.symPosSteps=Math.max(2,detail/sticks);
		
		//calculate
		var sym=ModelSymmetry.calculateSymmetry(model);
		Simulator.print(" "+sym+" "+ModelSymmetry.symAlphaSteps+" "+ModelSymmetry.symBetaSteps+" "+ModelSymmetry.symPosSteps+" "+model.geno.name);
	}
}

function PJNCfromStdin()
{
  var g = CLI.stdin.readUntilEOF();
  var o = Geno.newFromString(g);
  if (!o.is_valid)
    return "invalid_genotype";
  var o2 = GenePool.addGeno(o);
  return "" + int(o2.strsiz) + " " + int(o2.strjoints) + " " + int(o2.nnsiz) + " " + int(o2.nncon);
}


//converts all genotypes to the f0 format (useful because interpretation of genotypes in some formats (f2,f3,f7) depends on active neurons, their properties, properties of parts/joints etc.). f0 genototypes are independent from these settings. 
function allToF0() //no macro defined for this, this source is just for reference
{
  var i;
  for (i = 0;i < GenePool.size;i++)
  {
	  GenePool[i].name="[f"+(GenePool[i].geno.format-48)+"] "+GenePool[i].name;
	  GenePool[i].genotype=GenePool[i].f0genotype;
  }
}

function povrayFromGeno(g)
{
	if (!g.is_valid)
	{
		CLI.println("invalid genotype: "+g.genotype);
		return;
	}
	var cr=Populations[0].add(g);
	TrackingCam.cam_tracking=0; //tracking=off (don't follow the target)
	TrackingCam.cam_change=1; //target change="cut" (set camera on target change, once)
	TrackingCam.cam_dir=30; //azimuth
	TrackingCam.cam_h=45; //height
	//TrackingCam.cam_zoom=0.8;
	
	// method 1: camera automatically follows CreatureSelection (set of creatures)
	CreatureSelection.add(cr);
	
	// method 2: define any camera target by coordinates
	//var size=(cr.size_x,cr.size_y,cr.size_z).length;
	//TrackingCam.setTarget(cr.center_x,cr.center_y,cr.center_z,size);
	
	TrackingCam.tick(0); //call tick() to update camera parameters (this is performed automatically in graphical environments)
	POVExport.povex_outdir="";
	POVExport.povex_outfiles="output.pov";
	POVExport.povex_now();
	Populations[0].delete(cr);
	CLI.println("POV-Ray filename: "+POVExport.povex_lastfile);
}
